/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PlaylistTrack as PrismaPlaylistTrack,
  Playlist as PrismaPlaylist,
  Track as PrismaTrack,
} from "@prisma/client";

export class PlaylistTrackServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlaylistTrackCountArgs, "select">
  ): Promise<number> {
    return this.prisma.playlistTrack.count(args);
  }

  async playlistTracks(
    args: Prisma.PlaylistTrackFindManyArgs
  ): Promise<PrismaPlaylistTrack[]> {
    return this.prisma.playlistTrack.findMany(args);
  }
  async playlistTrack(
    args: Prisma.PlaylistTrackFindUniqueArgs
  ): Promise<PrismaPlaylistTrack | null> {
    return this.prisma.playlistTrack.findUnique(args);
  }
  async createPlaylistTrack(
    args: Prisma.PlaylistTrackCreateArgs
  ): Promise<PrismaPlaylistTrack> {
    return this.prisma.playlistTrack.create(args);
  }
  async updatePlaylistTrack(
    args: Prisma.PlaylistTrackUpdateArgs
  ): Promise<PrismaPlaylistTrack> {
    return this.prisma.playlistTrack.update(args);
  }
  async deletePlaylistTrack(
    args: Prisma.PlaylistTrackDeleteArgs
  ): Promise<PrismaPlaylistTrack> {
    return this.prisma.playlistTrack.delete(args);
  }

  async getPlaylist(parentId: string): Promise<PrismaPlaylist | null> {
    return this.prisma.playlistTrack
      .findUnique({
        where: { id: parentId },
      })
      .playlist();
  }

  async getTrack(parentId: string): Promise<PrismaTrack | null> {
    return this.prisma.playlistTrack
      .findUnique({
        where: { id: parentId },
      })
      .track();
  }
}
