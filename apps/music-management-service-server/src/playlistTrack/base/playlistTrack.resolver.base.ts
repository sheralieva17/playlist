/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PlaylistTrack } from "./PlaylistTrack";
import { PlaylistTrackCountArgs } from "./PlaylistTrackCountArgs";
import { PlaylistTrackFindManyArgs } from "./PlaylistTrackFindManyArgs";
import { PlaylistTrackFindUniqueArgs } from "./PlaylistTrackFindUniqueArgs";
import { CreatePlaylistTrackArgs } from "./CreatePlaylistTrackArgs";
import { UpdatePlaylistTrackArgs } from "./UpdatePlaylistTrackArgs";
import { DeletePlaylistTrackArgs } from "./DeletePlaylistTrackArgs";
import { Playlist } from "../../playlist/base/Playlist";
import { Track } from "../../track/base/Track";
import { PlaylistTrackService } from "../playlistTrack.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PlaylistTrack)
export class PlaylistTrackResolverBase {
  constructor(
    protected readonly service: PlaylistTrackService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlaylistTrack",
    action: "read",
    possession: "any",
  })
  async _playlistTracksMeta(
    @graphql.Args() args: PlaylistTrackCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlaylistTrack])
  @nestAccessControl.UseRoles({
    resource: "PlaylistTrack",
    action: "read",
    possession: "any",
  })
  async playlistTracks(
    @graphql.Args() args: PlaylistTrackFindManyArgs
  ): Promise<PlaylistTrack[]> {
    return this.service.playlistTracks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PlaylistTrack, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PlaylistTrack",
    action: "read",
    possession: "own",
  })
  async playlistTrack(
    @graphql.Args() args: PlaylistTrackFindUniqueArgs
  ): Promise<PlaylistTrack | null> {
    const result = await this.service.playlistTrack(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlaylistTrack)
  @nestAccessControl.UseRoles({
    resource: "PlaylistTrack",
    action: "create",
    possession: "any",
  })
  async createPlaylistTrack(
    @graphql.Args() args: CreatePlaylistTrackArgs
  ): Promise<PlaylistTrack> {
    return await this.service.createPlaylistTrack({
      ...args,
      data: {
        ...args.data,

        playlist: args.data.playlist
          ? {
              connect: args.data.playlist,
            }
          : undefined,

        track: args.data.track
          ? {
              connect: args.data.track,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlaylistTrack)
  @nestAccessControl.UseRoles({
    resource: "PlaylistTrack",
    action: "update",
    possession: "any",
  })
  async updatePlaylistTrack(
    @graphql.Args() args: UpdatePlaylistTrackArgs
  ): Promise<PlaylistTrack | null> {
    try {
      return await this.service.updatePlaylistTrack({
        ...args,
        data: {
          ...args.data,

          playlist: args.data.playlist
            ? {
                connect: args.data.playlist,
              }
            : undefined,

          track: args.data.track
            ? {
                connect: args.data.track,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PlaylistTrack)
  @nestAccessControl.UseRoles({
    resource: "PlaylistTrack",
    action: "delete",
    possession: "any",
  })
  async deletePlaylistTrack(
    @graphql.Args() args: DeletePlaylistTrackArgs
  ): Promise<PlaylistTrack | null> {
    try {
      return await this.service.deletePlaylistTrack(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Playlist, {
    nullable: true,
    name: "playlist",
  })
  @nestAccessControl.UseRoles({
    resource: "Playlist",
    action: "read",
    possession: "any",
  })
  async getPlaylist(
    @graphql.Parent() parent: PlaylistTrack
  ): Promise<Playlist | null> {
    const result = await this.service.getPlaylist(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Track, {
    nullable: true,
    name: "track",
  })
  @nestAccessControl.UseRoles({
    resource: "Track",
    action: "read",
    possession: "any",
  })
  async getTrack(
    @graphql.Parent() parent: PlaylistTrack
  ): Promise<Track | null> {
    const result = await this.service.getTrack(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
